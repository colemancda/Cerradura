// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.main.validateImages()
    storyboard.main.validateViewControllers()
    storyboard.newLock.validateImages()
    storyboard.newLock.validateViewControllers()
    storyboard.newPermission.validateImages()
    storyboard.newPermission.validateViewControllers()
    storyboard.permission.validateImages()
    storyboard.permission.validateViewControllers()
    storyboard.register.validateImages()
    storyboard.register.validateViewControllers()
  }
  
  struct image {
    static var activityTabBarIcon: UIImage? { return UIImage(named: "ActivityTabBarIcon") }
    static var appGradient: UIImage? { return UIImage(named: "appGradient") }
    static var appIcon: UIImage? { return UIImage(named: "AppIcon") }
    static var keysEmpty: UIImage? { return UIImage(named: "KeysEmpty") }
    static var keysTabBarIcon: UIImage? { return UIImage(named: "KeysTabBarIcon") }
    static var keysTabBarIconSelected: UIImage? { return UIImage(named: "KeysTabBarIconSelected") }
    static var lockTabBarIcon: UIImage? { return UIImage(named: "LockTabBarIcon") }
    static var lockTabBarIconSelected: UIImage? { return UIImage(named: "lockTabBarIconSelected") }
    static var logoLarge: UIImage? { return UIImage(named: "LogoLarge") }
    static var punkuDoorWhiteLarge: UIImage? { return UIImage(named: "punkuDoorWhiteLarge") }
    static var settingsTabBarIcon: UIImage? { return UIImage(named: "SettingsTabBarIcon") }
    static var settingsTabBarIconSelected: UIImage? { return UIImage(named: "SettingsTabBarIconSelected") }
    static var userProfile: UIImage? { return UIImage(named: "UserProfile") }
  }
  
  struct nib {
    static var launchScreen: LaunchScreen { return LaunchScreen() }
    
    struct LaunchScreen: NibResource {
      var instance: UINib { return UINib.init(nibName: "LaunchScreen", bundle: nil) }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
  
  struct reuseIdentifier {
    static var permissionCell: ReuseIdentifier<Cerradura.PermissionCell> { return ReuseIdentifier(identifier: "PermissionCell") }
  }
  
  struct segue {
    static var loginSegue: String { return "LoginSegue" }
    static var logoutFromSplitVC: String { return "LogoutFromSplitVC" }
  }
  
  struct storyboard {
    struct main {
      static var actionsNavigationStack: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("ActionsNavigationStack") as? UINavigationController }
      static var emptySelectionNavigationStack: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("EmptySelectionNavigationStack") as? UINavigationController }
      static var initialViewController: Cerradura.LoginViewController? { return instance.instantiateInitialViewController() as? Cerradura.LoginViewController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Main", bundle: nil) }
      static var keysNavigationStack: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("KeysNavigationStack") as? UINavigationController }
      static var lockNavigationStack: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("LockNavigationStack") as? UINavigationController }
      static var settingsNavigationStack: UINavigationController? { return instance.instantiateViewControllerWithIdentifier("SettingsNavigationStack") as? UINavigationController }
      
      static func validateImages() {
        assert(UIImage(named: "ActivityTabBarIcon") != nil, "[R.swift] Image named 'ActivityTabBarIcon' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "AppGradient") != nil, "[R.swift] Image named 'AppGradient' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "KeysTabBarIcon") != nil, "[R.swift] Image named 'KeysTabBarIcon' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "KeysTabBarIconSelected") != nil, "[R.swift] Image named 'KeysTabBarIconSelected' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "LockTabBarIcon") != nil, "[R.swift] Image named 'LockTabBarIcon' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "LockTabBarIconSelected") != nil, "[R.swift] Image named 'LockTabBarIconSelected' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "SettingsTabBarIcon") != nil, "[R.swift] Image named 'SettingsTabBarIcon' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "SettingsTabBarIconSelected") != nil, "[R.swift] Image named 'SettingsTabBarIconSelected' is used in storyboard 'Main', but couldn't be loaded.")
        assert(UIImage(named: "UserProfile") != nil, "[R.swift] Image named 'UserProfile' is used in storyboard 'Main', but couldn't be loaded.")
      }
      
      static func validateViewControllers() {
        assert(keysNavigationStack != nil, "[R.swift] ViewController with identifier 'keysNavigationStack' could not be loaded from storyboard 'Main' as 'UINavigationController'.")
        assert(settingsNavigationStack != nil, "[R.swift] ViewController with identifier 'settingsNavigationStack' could not be loaded from storyboard 'Main' as 'UINavigationController'.")
        assert(actionsNavigationStack != nil, "[R.swift] ViewController with identifier 'actionsNavigationStack' could not be loaded from storyboard 'Main' as 'UINavigationController'.")
        assert(emptySelectionNavigationStack != nil, "[R.swift] ViewController with identifier 'emptySelectionNavigationStack' could not be loaded from storyboard 'Main' as 'UINavigationController'.")
        assert(lockNavigationStack != nil, "[R.swift] ViewController with identifier 'lockNavigationStack' could not be loaded from storyboard 'Main' as 'UINavigationController'.")
      }
    }
    
    struct newLock {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "NewLock", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct newPermission {
      static var instance: UIStoryboard { return UIStoryboard(name: "NewPermission", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct permission {
      static var initialViewController: UINavigationController? { return instance.instantiateInitialViewController() as? UINavigationController }
      static var instance: UIStoryboard { return UIStoryboard(name: "Permission", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
    
    struct register {
      static var instance: UIStoryboard { return UIStoryboard(name: "Register", bundle: nil) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct ReuseIdentifier<T>: Printable {
  let identifier: String
  
  var description: String { return identifier }
}

protocol NibResource {
  var instance: UINib { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T : UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T : UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
}